name: Master Release Pipeline

on:
  push:
    branches: [master, main]
  pull_request:
    branches: [master, main]
    types: [opened, synchronize, closed]

permissions:
  contents: write
  packages: write
  pull-requests: read

jobs:
  check-approvals:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Check PR approvals
        uses: actions/github-script@v7
        with:
          script: |
            const { data: reviews } = await github.rest.pulls.listReviews({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            });

            const approvals = reviews.filter(review =>
              review.state === 'APPROVED' &&
              review.user.login !== context.payload.pull_request.user.login
            );

            console.log(`Found ${approvals.length} approvals`);

            if (approvals.length < 2) {
              core.setFailed(`Pull request requires 2 approvals, but only has ${approvals.length}`);
            }

  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v2.x

      - name: Cache Deno dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/deno
          key: ${{ runner.os }}-deno-${{ hashFiles('deno.json', 'deno.lock') }}
          restore-keys: |
            ${{ runner.os }}-deno-

      - name: Run all checks
        run: |
          echo "Running formatting check..."
          deno fmt --check

          echo "Running linting..."
          deno lint

          echo "Running type check..."
          deno check src/**/*.ts

          echo "Running tests..."
          deno test --allow-net --allow-read --allow-env

      - name: Compile binary for Linux
        run: |
          deno compile \
            --allow-net \
            --allow-read \
            --allow-env \
            --output gsuite-sync-linux \
            src/main.ts

      - name: Compile binary for macOS (x86_64)
        run: |
          deno compile \
            --allow-net \
            --allow-read \
            --allow-env \
            --target x86_64-apple-darwin \
            --output gsuite-sync-macos-x86_64 \
            src/main.ts

      - name: Compile binary for macOS (ARM64)
        run: |
          deno compile \
            --allow-net \
            --allow-read \
            --allow-env \
            --target aarch64-apple-darwin \
            --output gsuite-sync-macos-arm64 \
            src/main.ts

      - name: Compile binary for Windows
        run: |
          deno compile \
            --allow-net \
            --allow-read \
            --allow-env \
            --target x86_64-pc-windows-msvc \
            --output gsuite-sync-windows.exe \
            src/main.ts

      - name: Test compiled binaries
        run: |
          echo "Testing Linux binary..."
          ./gsuite-sync-linux --help

          echo "Testing macOS x86_64 binary..."
          file gsuite-sync-macos-x86_64

          echo "Testing macOS ARM64 binary..."
          file gsuite-sync-macos-arm64

          echo "Testing Windows binary..."
          file gsuite-sync-windows.exe

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: compiled-binaries
          path: |
            gsuite-sync-linux
            gsuite-sync-macos-x86_64
            gsuite-sync-macos-arm64
            gsuite-sync-windows.exe

  create-release:
    if: github.event_name == 'push' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')
    needs: [build-and-test]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version from commit
        id: version
        run: |
          # Extract version from latest tag or use date-based version
          if git describe --tags --exact-match HEAD 2>/dev/null; then
            VERSION=$(git describe --tags --exact-match HEAD)
          else
            # Generate version based on date and short commit hash
            VERSION="v$(date +'%Y.%m.%d')-$(git rev-parse --short HEAD)"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Generated version: $VERSION"

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: compiled-binaries

      - name: Generate release notes
        id: release-notes
        run: |
          # Get commits since last release
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")

          if [ -n "$LAST_TAG" ]; then
            echo "## Changes since $LAST_TAG" > release-notes.md
            git log $LAST_TAG..HEAD --oneline --pretty=format:"- %s (%h)" >> release-notes.md
          else
            echo "## Initial Release" > release-notes.md
            echo "First release of the Google Workspace Student Account Sync tool." >> release-notes.md
          fi

          echo "" >> release-notes.md
          echo "## Binaries" >> release-notes.md
          echo "- \`gsuite-sync-linux\`: Linux x86_64 binary" >> release-notes.md
          echo "- \`gsuite-sync-macos-x86_64\`: macOS x86_64 (Intel) binary" >> release-notes.md
          echo "- \`gsuite-sync-macos-arm64\`: macOS ARM64 (Apple Silicon) binary" >> release-notes.md
          echo "- \`gsuite-sync-windows.exe\`: Windows x86_64 binary" >> release-notes.md

          cat release-notes.md

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: Release ${{ steps.version.outputs.version }}
          body_path: release-notes.md
          files: |
            gsuite-sync-linux
            gsuite-sync-macos-x86_64
            gsuite-sync-macos-arm64
            gsuite-sync-windows.exe
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update README with latest release
        run: |
          # Update README with download links for latest release
          if [ -f README.md ]; then
            sed -i 's|Download the latest release.*|Download the latest release: [${{ steps.version.outputs.version }}](https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.version }})|g' README.md

            if git diff --quiet README.md; then
              echo "No changes to README.md"
            else
              git config --local user.email "action@github.com"
              git config --local user.name "GitHub Action"
              git add README.md
              git commit -m "Update README with release ${{ steps.version.outputs.version }}"
              git push
            fi
          fi
